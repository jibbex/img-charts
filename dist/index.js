var w=Object.defineProperty;var f=(i,t,e)=>t in i?w(i,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):i[t]=e;var a=(i,t)=>w(i,"name",{value:t,configurable:!0});var r=(i,t,e)=>f(i,typeof t!="symbol"?t+"":t,e);import*as p from"echarts";var m=class m extends Error{constructor(t){super(t),this.name="ChartError"}};a(m,"ChartError");var o=m,d=class d extends o{constructor(t){super(t),this.name="ChartDimensionError"}};a(d,"ChartDimensionError");var g=d,n,v=(n=class{constructor(t=!1){r(this,"startTime",0);r(this,"endTime",0);r(this,"verbose",!1);r(this,"call",a((t,...e)=>{this.verbose&&t(e)},"call"));this.verbose=t}start(){return this.call(()=>this.startTime=performance.now()),this}end(){return this.call(()=>this.endTime=performance.now()),this}get duration(){return this.endTime-this.startTime}log(t){this.call(()=>{this.startTime>0&&this.endTime===0&&this.end(),console.log(`%c\u23F1\uFE0F ${t} took ${this.duration.toPrecision(4)}ms`,"color: lightblue; font-weight: bold"),this.startTime=0,this.endTime=0})}},a(n,"Timing"),n);function b(i){switch(i){case"png":return"image/png";case"jpeg":return"image/jpeg";case"svg":return"image/svg+xml";case"webp":return"image/webp";default:throw new o("Invalid image type")}}a(b,"chartImageTypeToMime");var h,l=(h=class{constructor(t){r(this,"chart");r(this,"option");r(this,"canvas");r(this,"timing");this.timing=new v(t.debug||!0),this.timing.start(),this.validateOptions(t),this.option=t,this.canvas=document.createElement("canvas"),this.setDimensions({width:t.width||800,height:t.height||600}),this.chart=p.init(this.canvas),this.update(t),this.timing.log("initialization")}update(t){this.timing.start(),(t.width||t.height)&&this.setDimensions({width:t.width||this.canvas.width,height:t.height||this.canvas.height});let e={...t};return delete e.width,delete e.height,Array.isArray(e.series)?e.series?.forEach(s=>{s.animation=!1}):e.series&&(e.series.animation=!1),this.option={...this.option,...e},this.chart.setOption(this.option),this.timing.log("update"),this}setDimensions({width:t,height:e}){return this.validateOptions({width:t,height:e}),this.canvas.width=t,this.canvas.height=e,this}generateImage({type:t,quality:e}){if(e&&(e<0||e>3))throw new o("Quality must be between 0 and 3");return this.timing.start(),new Promise((s,c)=>{this.canvas.toBlob(u=>{this.timing.log("image generation"),u?s(u):c(new o("Failed to generate image"))},b(t),e)})}generateSvg(t){return this.chart.getConnectedDataURL({type:"svg",backgroundColor:"transparent",pixelRatio:t})}getChart(){return this.chart}on(t,e){this.chart.on(t,e)}getCanvas(){return this.canvas}dispose(){this.chart.dispose()}validateOptions(t){if(t.width&&t.width<=0)throw new g("Width must be positive");if(t.height&&t.height<=0)throw new g("Height must be positive")}},a(h,"Chart"),h),y=a(i=>new l(i),"createChart"),T=a(async({option:i,type:t,quality:e})=>{let s=new l(i);try{return await s.generateImage({type:t,quality:e})}finally{s.dispose()}},"createChartImage"),C=a(async({option:i,type:t,quality:e})=>{let s=await T({option:i,type:t,quality:e});return URL.createObjectURL(s)},"createChartImgSrc"),I=a((i,t)=>{let e=new v(!0);e.start();let s=new l(i);try{let c=s.generateSvg(t);return e.log("SVG generation"),c}finally{s.dispose()}},"createChartSvg"),O=l;export{g as ChartDimensionError,o as ChartError,y as createChart,T as createChartImage,C as createChartImgSrc,I as createChartSvg,O as default};
